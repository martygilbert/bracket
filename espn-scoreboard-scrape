#!/usr/bin/perl -w

$canned = 1;

# args
if ($ARGV[0] && $ARGV[0] =~ /^\d{4}[mnwc]$/) {
	$tourney = $ARGV[0] || "2011m";
	shift;
}
else { $tourney = "2011m"; }
if ($ARGV[0] && $ARGV[0] =~ /^(\d{8})$/) { $date = $1; }

# common setup
scalar %game;  # suppress a warning about $game being used only once
require 'bracket.pl';
setup("$tourney/teams");
my @actual = @{(read_winners("$tourney/actual"))[0]};
foreach (keys %team) { $reverse{$team{$_}} = $_; }

# read the file we're about to clobber
open(ACTUAL, "$tourney/actual");
while (<ACTUAL>) {
	chomp;
	if (/^(\d+)\s+/) {
		$out{$1} = $_;
	}
}

# team short-name mappings
open(INP, "<teams-espn-map");
while (<INP>) { /(.*) => (.*)/; $rename{$1} = $2; }

# create %lookup array to map "$team1$team2" => game number
foreach my $g (1..31) {
	if ($actual[$g*2] && $actual[$g*2+1]) {
		$lookup{$team{$actual[$g*2]}.$team{$actual[$g*2+1]}} = $g;
		$lookup{$team{$actual[$g*2+1]}.$team{$actual[$g*2]}} = $g;
	}
}
foreach my $g (32..63) {
	my ($a, $b) = split/,/, $game{$g};
	next if !$team{$a} || !$team{$b};
	$lookup{$team{$a}.$team{$b}} = $g;
	$lookup{$team{$b}.$team{$a}} = $g;
}

# scrape an ESPN scoreboard page
my ($sport, $confId);
if ($tourney =~ /m$/) { $sport = "ncb"; $confId = 100; }
elsif ($tourney =~ /n$/) { $sport = "ncb"; $confId = 50; }
elsif ($tourney =~ /c$/) { $sport = "ncb"; $confId = 55; }
elsif ($tourney =~ /w$/) { $sport = "ncw"; $confId = 100; }
my $url = "http://sports.espn.go.com/$sport/scoreboard?confId=$confId";
if ($date) { $url .= "&date=$date"; }
print STDERR "$url\n";
if ($canned) {
	open(WGET, "<scoreboard.html");
}
else {
	open(WGET, "wget -qO - \"$url\"|") || die "wget: $!";
	open(SCOREBOARD, ">scoreboard.html");
}
$/ = "gamebox";
while (<WGET>) {
	my $current_game;
	print SCOREBOARD if !$canned;
	if (m!var\s+snapshotId\s+=\s+(\d+)!) {
		$snapshotId = $1;
	}
	if (m!<a href="clubhouse\?teamId=\d+">([^<]+)</a></div></td><td class="team-score"><span id="\d+-awayHeaderScore!) {
		$away = $1;
		$away = $rename{$away} || $away;
		#print STDERR "away=\"$away\"\n";
	}
	if (m!<a href="clubhouse\?teamId=\d+">([^<]+)</a></div></td><td class="team-score"><span id="\d+-homeHeaderScore!) {
		$home = $1;
		$home = $rename{$home} || $home;
		#print STDERR "home=\"$home\"\n";
	}
	if (m!(\d+)-gameHeader!) {
		$current_game = $1;
		my $g = $lookup{$home.$away};
		$espn_to_gameno{$current_game} = $g;
	}
	if (/-statusLine1">(Final[^<]*)/) {
		$clock = $1;
		#print STDERR "clock=\"$clock\"\n";
	}
	elsif (m!<li id="\d+-statusLine1">([^<]*)</li><li[^>]*><span id="\d+-statusLine2Left">([^<]*)</span><span id="\d+-statusLine2Right"[^>]*>([^<]*)</span>!) {
		$clock = "$1 $2 $3";
		#print STDERR "clock=\"$clock\"\n";
	}
	elsif (/class="time-remaining" style="display: inline">([0-9:]*)/) {
		$clock = $1;
		#print STDERR "clock=\"$clock\"\n";
	}
	if (/-awayHeaderScore">(\d+)<.*-homeHeaderScore">(\d+)</) {
		$away_score = $1;
		$home_score = $2;
		#print STDERR "score=\"$away_score\" to \"$home_score\"\n";
		my $g = $lookup{$home.$away};
		if (!$g) {
			print STDERR "Can't find game number for \"$home\" vs. \"$away\"\n";
			next;
		}
		my ($ot) = $clock =~ /^Final - (\d*)\w*\s*OT/;
		$ot = defined $ot ? " ${ot}OT" : "";
		my $gstring;
		if ($home_score > $away_score) {
			$gstring = "$g $reverse{$home} $home_score-$away_score$ot";
			$out{$g} = $gstring if $clock =~ /^Final/;
		}
		else {
			$gstring = "$g $reverse{$away} $away_score-$home_score$ot";
			$out{$g} = $gstring if $clock =~ /^Final/;
		}
		printf STDERR "%s %-20s # %16s  %-27s    %s\n",
			$current_game, $gstring, "[$clock]", "($reverse{$home}) $home - $home_score",
			"($reverse{$away}) $away - $away_score";
	}
}

if ($sport eq "ncb" && $snapshotId) {
	$/ = "\n";
	if ($canned) {
		open(WGET, "<snapshot.xml");
	}
	else {
		printf STDERR "Getting snapshot $snapshotId\n";
		$url = "http://scores.espn.go.com/ncb/caster/snapshot?sessionId=ncbScoreboard09&masterSnap=$snapshotId&casterSnap=$snapshotId&rand=1300392054758";
		open(WGET, "wget -qO - \"$url\"|") || die "wget: $!";
		open(SNAPSHOT, ">snapshot.xml");
	}
	while (<WGET>) {
		print SNAPSHOT if !$canned;
		chomp;
		foreach my $line (split/\r/, $_) {
			if ($line =~ m!\]\]!) { undef $snapshot_game; }
			if ($line =~ m/<Snapshot snapshotId="\d+"><!\[CDATA\[(\d+)\s+(.*)/) {
				$snapshot_game = $1;
				do_snapshot_command($snapshot_game, $2);
			}
			elsif ($snapshot_game) {
				do_snapshot_command($snapshot_game, $line);
			}
		}
	}
}

open(ACTUAL, ">$tourney/actual.new");
foreach (sort {$b cmp $a} keys %out) {
	print ACTUAL "$out{$_}\n";
}
rename("$tourney/actual.new", "$tourney/actual");

sub do_snapshot_command {
	my $gameno = $espn_to_gameno{$_[0]};
	my $str = $_[1];
	$str =~ tr/\r/\n/;
	#print STDERR "<LINE> $str\n";
	if (!$gameno) {
		#print STDERR "Game \"$_[0]\" not found???\n";
		$gameno = "X-$_[0]";
	}
	if ($str =~ /^01(\w+)/) {      # home outcome (loser, winner)
		print STDERR "[$gameno] Home team is: \"$1\"\n";
	}
	if ($str =~ /^02(\w+)/) {      # away outcome (loser, winner)
		print STDERR "[$gameno] Away team is: \"$1\"\n";
	}
	if ($str =~ /^03(\d+)/) {      # home score
		print STDERR "[$gameno] Home score is: \"$1\"\n";
	}
	if ($str =~ /^04(\d+)/) {      # away score
		print STDERR "[$gameno] Away score is: \"$1\"\n";
	}
	if ($str =~ /^05(\w+)/) {      # time label (Final)
		print STDERR "[$gameno] Time is: \"$1\"\n";
	}
	if ($str =~ /^06(\w+)/) {      # period label (1st, 2nd, Halftime)
		print STDERR "[$gameno] Period is: \"$1\"\n";
	}
	if ($str =~ /^07([0-9:]+)/) {  # time remaining (0:01, or &nbsp;)
		print STDERR "[$gameno] Time remaining: \"$1\"\n";
	}
	if ($str =~ /^1c(.*)/) {       # status message, terminated by \n or \r
		#print STDERR "[$gameno] Status: \"$1\"\n";
	}
}
